package com.hykj.ccbrother.service.plat;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.hykj.ccbrother.apimodel.OrderInfo;
import com.hykj.ccbrother.apimodel.UserInfo;
import com.hykj.ccbrother.base.AppBack;
import com.hykj.ccbrother.model.CoinPlatModel;
import com.hykj.ccbrother.utils.HttpUtil;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

@Service
public class BithumbService implements  PlatService {

    private static final Logger logger = LoggerFactory.getLogger(BithumbService.class);

    @Override
    public CoinPlatModel getTicker(CoinPlatModel coinPlatModel) {
        return null;
    }

    @Override
    public List<CoinPlatModel> getAllTicker(List<CoinPlatModel> list) {

        String url = "https://api.bithumb.com/public/ticker/all";
        String r = HttpUtil.get(url , null);
        logger.info(r);
        JSONObject apiBack = JSON.parseObject(r);
        JSONObject data = apiBack.getJSONObject("data");
        List newList=new ArrayList<CoinPlatModel>();
        logger.info("dateTime "+data.getLong("date"));
        Date date= new Date(data.getLong("date"));
        logger.info("date "+date.getTime());
        for(int i=0;i<list.size();i++) {
            try {
                CoinPlatModel newCoinPlat = new CoinPlatModel();
                newCoinPlat.setId(list.get(i).getId());
                JSONObject coinJson = data.getJSONObject(list.get(i).getSymbol());
                newCoinPlat.setTradingTime(date);
                newCoinPlat.setBuy(coinJson.getBigDecimal("buy_price"));
                newCoinPlat.setHigh(coinJson.getBigDecimal("max_price"));
                newCoinPlat.setLow(coinJson.getBigDecimal("min_price"));
                newCoinPlat.setSell(coinJson.getBigDecimal("sell_price"));
                newCoinPlat.setVol(coinJson.getBigDecimal("volume_1day"));
                newCoinPlat.setSymbol(list.get(i).getSymbol());
                newList.add(newCoinPlat);
            }catch (Exception e){
                logger.error(e.getMessage());
            }
        }
        return newList;
    }

    @Override
    public AppBack trade(String apiKey, String secret, String symbol, int type, BigDecimal price, BigDecimal amount) {
        return null;
    }

    @Override
    public UserInfo getUserInfo(String apiKey, String secret, int platId) {
    	
        return null;
    }

    @Override
    public List<OrderInfo> getOrderInfo(String apiKey, String secret, Integer coinPlatId, String symbol) {
        return null;
    }

    @Override
    public AppBack cancelOrder(String apiKey, String secret, String orderId, String symbol) {
        return null;
    }
}
